@page "/Clientes/Create"
@rendermode InteractiveServer
@inject ClientesService clientesService
@inject NavigationManager navigation

<PageTitle>Crear Clientes</PageTitle>


<EditForm Model="@Clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Cliente</h5>
            </div>

            <div class="card-body">
                @* Cliente ID*@
                <div class="mb-3">
                    <label for="ClienteId" class="form-label"><strong>Cliente Id</strong></label>
                    <InputNumber class="form-control" @bind-Value="Clientes.ClienteId" readonly></InputNumber>
                </div>

                @* Fecha *@
                <div class="mb-3">
                    <label for="Fecha" class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Clientes.Fecha"></InputDate>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Cliente" class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Clientes.Nombres"></InputText>
                    <ValidationMessage For="(()=> Clientes.Nombres)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(Mensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Mensaje
                        </div>
                    }
                </div>

                @*Whatsapp*@
                <div class="mb-3">
                    <label for="Whatsapp" class="form-label"><strong>WhatsApp</strong></label>
                    <InputText class="form-control" @bind-Value="Clientes.WhatsApp"></InputText>
                    <ValidationMessage For="(()=> Clientes.WhatsApp)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(MensajeN))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeN
                        </div>
                    }
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Clientes/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Clientes Clientes { get; set; } = new Clientes();
    public String Mensaje { get; set; } = string.Empty;
    public String MensajeN { get; set; } = string.Empty;

    public async Task Guardar()
    {
        bool nombreExiste = await clientesService.NombreExiste(Clientes.Nombres);
        bool numeroExiste = await clientesService.NumeroExiste(Clientes.WhatsApp);
        if (nombreExiste)
        {
            Mensaje = "El nombre del Cliente ya existe.";
            return;
        }
        if (numeroExiste)
        {
            MensajeN = "El numero del Cliente ya esta en uso.";
            return;
        }
        {
            await clientesService.Guardar(Clientes);
            Clientes = new Clientes();
            navigation.NavigateTo("/Clientes/Index");
        }
    }

}
