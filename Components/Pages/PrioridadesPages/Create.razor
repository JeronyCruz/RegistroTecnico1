@page "/Prioridades/Create"
@rendermode InteractiveServer
@inject PrioridadesService prioridadesService
@inject NavigationManager navigation
<link rel="stylesheet" href="StyleCreate.css" />

<PageTitle>Crear nueva Prioridad</PageTitle>

<EditForm Model="@Prioridades" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-5">
        <div class="card p-4 shadow-lg border-primary">
            <div class="card-header">
                <h5 class="card-title text-center mb-4 bg-primary text-white p-2 rounded">Crear Prioridad</h5>
            </div>

            <div class="card-body">
                @* Prioridad ID*@
                <div class="mb-3">
                    <label for="PrioridadId" class="form-label text-primary">Prioridad Id</label>
                    <InputNumber class="form-control" @bind-Value="Prioridades.PrioridadId" readonly></InputNumber>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Prioridad" class="form-label text-primary">Descripc&iacute;on</label>
                    <InputText class="form-control" @bind-Value="Prioridades.Descripcion"></InputText>
                    <ValidationMessage For="(()=> Prioridades.Descripcion)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(Mensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Mensaje
                        </div>
                    }
                </div>

                @*Tiempo*@
                <div class="mb-3">
                    <label for="Tiempo" class="form-label text-primary">Tiempo</label>
                    <InputNumber class="form-control" @bind-Value="Prioridades.Tiempo"></InputNumber>
                    <ValidationMessage For="(()=> Prioridades.Tiempo)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(MensajeTiempo))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeTiempo
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <a href="/Prioridades/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3"> Volver</a>
            <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3"> Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    public Prioridades Prioridades { get; set; } = new Prioridades();
    public string Mensaje { get; set; } = string.Empty;
    public string MensajeTiempo { get; set; } = string.Empty;

    public async Task Guardar()
    {
        if(Prioridades.Tiempo <= 0)
        {
            MensajeTiempo = "El tiempo no puede ser menor a 0";
            return;
        }


        bool descripcionExiste = await prioridadesService.DescripcionExiste(Prioridades.Descripcion);
        bool tiempoExiste = await prioridadesService.TiempoExiste(Prioridades.Tiempo);
        if (descripcionExiste)
        {
            Mensaje = "La descripcion ya existe.";
            return;
        }
        if (tiempoExiste)
        {
            MensajeTiempo = "Este tiempo ya pertenece a una Prioridad.";
            return;
        }
        {
            await prioridadesService.Guardar(Prioridades);
            Prioridades = new Prioridades();
            navigation.NavigateTo("/Prioridades/Index");
        }
    }
}
