@page "/Prioridades/Edit/{PrioridadesId:int}"
@rendermode InteractiveServer
@inject PrioridadesService prioridadesService
@inject NavigationManager navigation

<PageTitle> Editar Prioridad</PageTitle>

<h2>Editar Prioridad</h2>

<div class="Contenedor_Modificar">
    <EditForm Model="@Prioridades" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @*ID*@
        <div class="inputsAgregar">
            <label>ID</label>
            <InputNumber @bind-Value="Prioridades.PrioridadId" readonly />
        </div>
        @*Nombre*@
        <div class="inputsAgregar">
            <label>Descripci&oacute;n</label>
            <InputText @bind-Value="Prioridades.Descripcion" />
            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <label class="error-label">@Mensaje</label>
            }
            <ValidationMessage For="(() => Prioridades.Descripcion)"></ValidationMessage>
        </div>
        @*WhatsApp*@
        <div class="inputsAgregar">
            <label>Tiempo</label>
            <InputNumber @bind-Value="Prioridades.Tiempo"></InputNumber>
            @if (!string.IsNullOrEmpty(MensajeTiempo))
            {
                <label class="error-label">@MensajeTiempo</label>
            }
            <ValidationMessage For="(() => Prioridades.Tiempo)"></ValidationMessage>
        </div>
        @*Botones*@
        <div class="botones">
            <a href="/Prioridades/Index" class="btn btn-primary">
                <i class="bi bi-arrow-return-left"></i> Volver
            </a>
            <button type="submit" class="bi bi-plus-circle-dotted"> Guardar</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int PrioridadesId { get; set; }
    public Prioridades Prioridades { get; set; } = new Prioridades();
    public string Mensaje { get; set; } = string.Empty;
    public string MensajeTiempo { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Prioridades = await prioridadesService.Buscar(PrioridadesId);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al cargar Cliente: {ex.Message}");
        }
    }

    public async Task Guardar()
    {
        if (Prioridades.Tiempo <= 0)
        {
            MensajeTiempo = "El tiempo no puede ser menor a 0";
            return;
        }


        var DescripcionExistente = await prioridadesService.Buscar(PrioridadesId);

        if (DescripcionExistente != null && DescripcionExistente.Descripcion != Prioridades.Descripcion)
        {
            bool nombreExiste = await prioridadesService.DescripcionExiste(Prioridades.Descripcion);
            if (nombreExiste)
            {
                Mensaje = "La descripcion ya está en uso.";
                return;
            }
        }


        bool TiempoExiste = await prioridadesService.TiempoExiste(Prioridades.Tiempo);
        if (TiempoExiste && DescripcionExistente.Tiempo != Prioridades.Tiempo)
        {
            MensajeTiempo = "Este tiempo ya pertenece a una Prioridad.";
            return;
        }
        await prioridadesService.Guardar(Prioridades);
        Prioridades = new Prioridades();
        navigation.NavigateTo("/Prioridades/Index");
    }
}
