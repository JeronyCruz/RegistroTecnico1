@page "/Prioridades/Edit/{PrioridadesId:int}"
@rendermode InteractiveServer
@inject PrioridadesService prioridadesService
@inject NavigationManager navigation

<PageTitle> Editar Prioridad</PageTitle>


<EditForm Model="@Prioridades" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Editar Prioridad</h5>
            </div>

            <div class="card-body">
                @* Prioridad ID*@
                <div class="mb-3">
                    <label for="PrioridadId" class="form-label">Prioridad Id</label>
                    <InputNumber class="form-control" @bind-Value="Prioridades.PrioridadId" readonly></InputNumber>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Prioridad" class="form-label">Descripc&iacute;on</label>
                    <InputText class="form-control" @bind-Value="Prioridades.Descripcion"></InputText>
                    <ValidationMessage For="(()=> Prioridades.Descripcion)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(Mensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Mensaje
                        </div>
                    }
                </div>

                @*Tiempo*@
                <div class="mb-3">
                    <label for="Tiempo" class="form-label">Tiempo</label>
                    <InputNumber class="form-control" @bind-Value="Prioridades.Tiempo"></InputNumber>
                    <ValidationMessage For="(()=> Prioridades.Tiempo)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(MensajeTiempo))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeTiempo
                        </div>
                    }
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Prioridades/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrioridadesId { get; set; }
    public Prioridades Prioridades { get; set; } = new Prioridades();
    public string Mensaje { get; set; } = string.Empty;
    public string MensajeTiempo { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Prioridades = await prioridadesService.Buscar(PrioridadesId);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al cargar Cliente: {ex.Message}");
        }
    }

    public async Task Guardar()
    {
        if (Prioridades.Tiempo <= 0)
        {
            MensajeTiempo = "El tiempo no puede ser menor a 0";
            return;
        }


        var DescripcionExistente = await prioridadesService.Buscar(PrioridadesId);

        if (DescripcionExistente != null && DescripcionExistente.Descripcion != Prioridades.Descripcion)
        {
            bool nombreExiste = await prioridadesService.DescripcionExiste(Prioridades.Descripcion);
            if (nombreExiste)
            {
                Mensaje = "La descripcion ya está en uso.";
                return;
            }
        }


        bool TiempoExiste = await prioridadesService.TiempoExiste(Prioridades.Tiempo);
        if (TiempoExiste && DescripcionExistente.Tiempo != Prioridades.Tiempo)
        {
            MensajeTiempo = "Este tiempo ya pertenece a una Prioridad.";
            return;
        }
        await prioridadesService.Guardar(Prioridades);
        Prioridades = new Prioridades();
        navigation.NavigateTo("/Prioridades/Index");
    }
}
