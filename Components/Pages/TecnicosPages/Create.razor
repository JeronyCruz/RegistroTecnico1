@page "/Tecnicos/Create"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager navigation

<PageTitle> Agregar T&eacute;cnicos</PageTitle>

<EditForm Model="@Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear T&eacute;cnico</h5>
            </div>

            <div class="card-body">
                @* Tecnico ID*@
                <div class="mb-3">
                    <label for="TecnicoId" class="form-label">Tipo T&eacute;cnico Id</label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Tecnico" class="form-label">Nombre del T&eacute;cnico</label>
                    <InputText class="form-control" @bind-Value="Tecnico.NombresTecnico"></InputText>
                    <ValidationMessage For="(()=> Tecnico.NombresTecnico)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(Mensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Mensaje
                        </div>
                    }
                </div>

                @*Sueldo Hora*@
                <div class="mb-3">
                    <label for="SueldoHora" class="form-label">Sueldo por hora</label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.SueldoHora"></InputNumber>
                    <ValidationMessage For="(()=> Tecnico.SueldoHora)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(SueldoMensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @SueldoMensaje
                        </div>
                    }
                </div>

                @*Descripcion Tecnico*@
                <div class="mb-3 d-flex align-items-center">
                    <label for="TipoT" class="form-label">Descripc&iacute;on del T&eacute;cnico</label>
                    <InputSelect id="DeudorId" class="form-control" @bind-Value="Tecnico.Id">
                        <option value="0" selected disabled>-- Seleccione un Tipo Tecnico --</option>
                        @foreach (var tipoTecnico in TiposTecnico)
                        {
                            <option value="@tipoTecnico.Id">@tipoTecnico.Descripcion</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Tecnicos/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    public List<TiposTecnicos> TiposTecnico { get; set; } = new List<TiposTecnicos>();
    public string Mensaje { get; set; } = string.Empty;
    public string SueldoMensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        TiposTecnico = await tiposTecnicosService.Listar(j => j.Id > 0);
    }

    public async Task Guardar()
    {
        if (Tecnico.SueldoHora <= 0)
        {
            SueldoMensaje = "El sueldo por hora debe ser mayor a 0.";
            return;
        }

        bool nombreExiste = await tecnicoService.NombreExiste(Tecnico.NombresTecnico);

        if (nombreExiste)
        {
            Mensaje = "El nombre del técnico ya está en uso.";
        }
        else
        {
            await tecnicoService.Guardar(Tecnico);
            Tecnico = new Tecnicos();
            navigation.NavigateTo("/Tecnicos/Index");
        }
    }

}
