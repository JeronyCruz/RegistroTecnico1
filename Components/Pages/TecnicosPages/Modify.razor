@page "/Tecnicos/Edit/{tecnicoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager navigation

<PageTitle> Editar T&eacute;cnicos</PageTitle>

<h3>Modificar</h3>

<div class="Contenedor_Modificar">
    <EditForm Model="@Tecnico" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="Inputs-text">
            <label>Técnico Id:</label>
            <input type="text" @bind="Tecnico.TecnicoId" readonly />
        </div>

        <div class="Inputs-text">
            <label>Nombre:</label>
            <InputText @bind-Value="Tecnico.NombresTecnico" />
            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <label class="error-label">@Mensaje</label>
            }
            <ValidationMessage For="(()=> Tecnico.NombresTecnico)"></ValidationMessage>
        </div>

        <div class="Inputs-text">
            <label>Sueldo Hora:</label>
            <InputNumber @bind-Value="Tecnico.SueldoHora" />
        </div>

        <div class="inputsAgregar">
            <label>Sueldo por Hora</label>
            <InputSelect class="form-select" @bind-Value="Tecnico.Descripcion">
                <option ="" selected disabled>Elija una Opci&oacute;n</option>
                @foreach (var tipoTecnico in TiposTecnico)
                {
                    <option value="@tipoTecnico.Descripcion">@tipoTecnico.Descripcion</option>
                }
            </InputSelect>
        </div>

        <div class="botones">
            <button type="button" @onclick="Volver" class="bi bi-arrow-90deg-left"> Volver</button>
            <button type="submit" class="bi bi-plus-circle-dotted"> Guardar</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public List<TiposTecnicos> TiposTecnico { get; set; } = new List<TiposTecnicos>();
    string Mensaje { get; set; } = string.Empty;
    Tecnicos Tecnico { get; set; } = new Tecnicos();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TiposTecnico = await tiposTecnicosService.Listar(j => j.Id > 0);
            Tecnico = await tecnicoService.Buscar(TecnicoId);
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar técnico: {ex.Message}");
        }
    }

    public async Task Guardar()
    {
        var tecnicoExistente = await tecnicoService.Buscar(TecnicoId);

        if (tecnicoExistente != null && tecnicoExistente.NombresTecnico != Tecnico.NombresTecnico)
        {
            bool nombreExiste = await tecnicoService.NombreExiste(Tecnico.NombresTecnico);

            if (nombreExiste)
            {
                Mensaje = "El nombre del técnico ya está en uso.";
                return;
            }
        }

        await tecnicoService.Guardar(Tecnico);
        Tecnico = new Tecnicos();
        navigation.NavigateTo("/Tecnicos/Index");
    }


    public void Volver()
    {
        navigation.NavigateTo("/Tecnicos/Index");
    }
}