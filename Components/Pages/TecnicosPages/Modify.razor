@page "/Tecnicos/Edit/{tecnicoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<h3>Modificar</h3>

<div class="Contenedor_Modificar">
    <EditForm Model="@Tecnico" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="Inputs-text">
            <label>Técnico Id:</label>
            <input type="text" @bind="Tecnico.TecnicoId" readonly />
        </div>

        <div class="Inputs-text">
            <label>Nombre:</label>
            <InputText @bind-Value="Tecnico.NombresTecnico" />
            <ValidationMessage For="(()=> Tecnico.NombresTecnico)"></ValidationMessage>
        </div>

        <div class="Inputs-text">
            <label>Sueldo Hora:</label>
            <InputNumber @bind-Value="Tecnico.SueldoHora" />
        </div>

        <div class="botones">
            <button type="button" @onclick="Volver">Volver</button>
            <button type="submit">Guardar</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    Tecnicos Tecnico{ get; set; } = new Tecnicos();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Tecnico = await tecnicoService.Buscar(TecnicoId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar técnico: {ex.Message}");
        }
    }

    public async Task Guardar()
    {
        try
        {
            await tecnicoService.Guardar(Tecnico);
            navigation.NavigateTo("/Tecnicos/Index");
        }
        catch (Exception ex)
        {
           
            Console.WriteLine($"Error al guardar: {ex.Message}");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Tecnicos/Index");
    }
}
