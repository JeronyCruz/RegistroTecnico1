@page "/Tecnicos/Modify/{tecnicoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<h3>Modificar</h3>

<div class="Contenedor_Modificar">
    <EditForm Model="@tecnicos" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="Inputs-text">
            <label>Tecnico Id:</label>
            <input type="text" @bind="tecnicos.tecnicoId" readonly />
        </div>

        <div class="Inputs-text">
            <label>Nombre:</label>
            <InputText @bind-Value="tecnicos.nombreTecnico" />
            <ValidationMessage For="(()=> tecnicos.nombreTecnico)"></ValidationMessage>
        </div>

        <div class="Inputs-text">
            <label>Sueldo Hora:</label>
            <InputNumber @bind-Value="tecnicos.sueldoHora" />
        </div>

        <div class="botones">
            <button type="button" @onclick="Volver">Volver</button>
            <button type="submit">Guardar</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int tecnicoId { get; set; }
    Tecnicos tecnicos = new Tecnicos();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tecnicos = await tecnicoService.Buscar(tecnicoId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar técnico: {ex.Message}");
        }
    }

    public async Task Guardar()
    {
        try
        {
            await tecnicoService.Guardar(tecnicos);
            navigation.NavigateTo("/Tecnicos/Index");
        }
        catch (Exception ex)
        {
           
            Console.WriteLine($"Error al guardar: {ex.Message}");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Tecnicos/Index");
    }
}
