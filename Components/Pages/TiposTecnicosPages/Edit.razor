@page "/TiposTecnicos/Edit/{tecnicoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager navigation

<PageTitle> Editar Tipos T&eacute;cnicos</PageTitle>

<EditForm Model="@TiposTecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-5">
        <div class="card p-4 shadow-lg border-primary">
            <div class="card-header">
                <h5 class="card-title text-center mb-4 bg-primary text-white p-2 rounded">Editar Tipo T&eacute;cnico</h5>
            </div>

            <div class="card-body">
                @*Tipo Tecnico ID*@
                <div class="mb-3">
                    <label for="TipoTecnicoId" class="form-label text-primary">Tipo T&eacute;cnico Id</label>
                    <InputNumber class="form-control" @bind-Value="TiposTecnico.Id" readonly></InputNumber>
                </div>

                @*Descripccion*@
                <div class="mb-3">
                    <label for="TipoTecnico" class="form-label text-primary">Descripc&iacute;on del T&eacute;cnico</label>
                    <InputText class="form-control" @bind-Value="TiposTecnico.Descripcion"></InputText>
                    <ValidationMessage For="(()=> TiposTecnico.Descripcion)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(Mensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Mensaje
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <a href="/TiposTecnicos/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3"> Volver</a>
            <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3"> Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public string Mensaje { get; set; } = string.Empty;
    public TiposTecnicos TiposTecnico { get; set; } = new TiposTecnicos();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TiposTecnico = await tiposTecnicosService.Buscar(TecnicoId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar técnico: {ex.Message}");
        }
    }

    public async Task Guardar()
    {
        bool DescripcionExiste = await tiposTecnicosService.DescripcionExiste(TiposTecnico.Descripcion);

        if (DescripcionExiste)
        {

            Mensaje = "La Descripcion del técnico ya está en uso.";
        }
        else
        {

            await tiposTecnicosService.Guardar(TiposTecnico);
            TiposTecnico = new TiposTecnicos();
            navigation.NavigateTo("/TiposTecnicos/Index");
        }
    }
}
