@page "/Trabajos/Create"
@rendermode InteractiveServer
@inject TecnicoService tecnicosService
@inject TrabajosService trabajosService
@inject ClientesService clientesService
@inject NavigationManager navigation

<link rel="stylesheet" href="StyleCreate.css" />

<PageTitle> Agregar Trabajos</PageTitle>

<h2>Crear Nuevo Trabajo</h2>

<EditForm Model="@Trabajos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="ContenedorAgregar">
        <h3>Nuevo Trabajo</h3>
        @*ID*@
        <div class="inputsAgregar">
            <label>ID</label>
            <InputNumber @bind-Value="Trabajos.TrabajoId" readonly />
        </div>
        <div class="inputsAgregar">
            <label>Fecha</label>
            <InputDate @bind-Value="Trabajos.Fecha">@Trabajos.Fecha</InputDate>
        </div>
        @*Cliente*@
        <div class="inputsAgregar">
            <label>Elija el Cliente</label>
            <InputSelect class="form-select" @bind-Value="Trabajos.ClienteId">
                @foreach (var cliente in Clientes)
                {
                    <option value="@cliente.ClienteId">@cliente.Nombres</option>
                }
            </InputSelect>
        </div>
        @*Nombre Tecnico*@
        <div class="inputsAgregar">
            <label>Elija el Tecnico</label>
            <InputSelect class="form-select" @bind-Value="Trabajos.TecnicoId">
                @foreach (var tecnico in Tecnicos)
                {
                    <option value="@tecnico.TecnicoId">@tecnico.NombresTecnico</option>
                }
            </InputSelect>
        </div>
        @*Descripcion*@
        <div class="inputsAgregar">
            <label>Descripcion del Trabajo</label>
            <InputText @bind-Value="Trabajos.Descripcion" />
        </div>
        
        <div class="inputsAgregar">
            <label>Monto del Trabajo</label>
            <InputNumber @bind-Value="Trabajos.Monto" />
            @if (!string.IsNullOrEmpty(SueldoMensaje))
            {
                <label class="error-label">@SueldoMensaje</label>
            }
        </div>
        @*Botones*@
        <div class="BotonesAgregar">
            <button type="button" @onclick="Volver">
                <i class="bi bi-arrow-return-left"></i> Volver
            </button>
            <button type="submit">
                <i class="bi bi-plus-circle-dotted"></i> Guardar
            </button>
        </div>
    </div>
</EditForm>

@code {
    public List<Tecnicos> Tecnicos = new List<Tecnicos>();
    public List<Clientes> Clientes = new List<Clientes>();
    public Trabajos Trabajos { get; set; } = new Trabajos();
    string Mensaje { get; set; } = string.Empty;
    string SueldoMensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Tecnicos = await tecnicosService.Listar(j => j.Id > 0);
        Clientes = await clientesService.Listar(j => j.ClienteId > 0);
    }

    public async Task Guardar()
    {
        if (Trabajos.Monto <= 0)
        {
            SueldoMensaje = "El sueldo por hora debe ser mayor a 0.";
            return;
        }

        else
        {
            await trabajosService.Guardar(Trabajos);
            Trabajos = new Trabajos();
            navigation.NavigateTo("/Trabajos/Index");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Trabajos/Index");
    }
}
