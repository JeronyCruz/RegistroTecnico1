@page "/Trabajos/Edit/{TrabajoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicosService
@inject TrabajosService trabajosService
@inject ClientesService clientesService
@inject PrioridadesService prioridadesService
@inject NavigationManager navigation

<link rel="stylesheet" href="StyleCreate.css" />

<PageTitle>Editar Trabajo</PageTitle>

<h2>Editar Trabajo</h2>

<EditForm Model="@Trabajos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-5">
        <div class="card p-4 shadow-lg border-primary">
            <div class="card-header">
                <h5 class="card-title text-center mb-4 bg-primary text-white p-2 rounded">Editar Trabajo</h5>
            </div>

            <div class="card-body">
                @*ID*@
                <div class="mb-3">
                    <label for="CobroId" class="form-label text-primary">Trabajo ID</label>
                    <InputNumber class="form-control" @bind-Value="Trabajos.TrabajoId" readonly></InputNumber>
                </div>

                @*Fecha*@
                <div class="mb-3">
                    <label for="fecha" class="form-label text-primary">Fecha</label>
                    <InputDate class="form-control" @bind-Value="Trabajos.Fecha"></InputDate>
                </div>

                @*Prioridad*@
                <div class="mb-3 d-flex align-items-center">
                    <label for="DeudorId" class="form-label text-primary">Elija la Prioridad</label>
                    <InputSelect id="DeudorId" class="form-control border-primary" @bind-Value="Trabajos.PrioridadId">
                        <option disabled value="">-- Seleccione un deudor --</option>
                        @foreach (var prioridad in Prioridades)
                        {
                            <option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
                        }
                    </InputSelect>
                </div>

                @*Cliente*@
                <div class="mb-3 d-flex align-items-center">
                    <label for="DeudorId" class="form-label text-primary">Elija el Cliente</label>
                    <InputSelect id="DeudorId" class="form-control border-primary" @bind-Value="Trabajos.ClienteId">
                        <option disabled value="">-- Seleccione un deudor --</option>
                        @foreach (var cliente in Clientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                </div>

                @*Tecnico*@
                <div class="mb-3 d-flex align-items-center">
                    <label for="DeudorId" class="form-label text-primary">Elija el Tecnico</label>
                    <InputSelect id="DeudorId" class="form-control border-primary" @bind-Value="Trabajos.TecnicoId">
                        <option disabled value="">-- Seleccione un deudor --</option>
                        @foreach (var tecnico in Tecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.NombresTecnico</option>
                        }
                    </InputSelect>
                </div>

                @*Descripccion*@
                <div class="mb-3">
                    <label for="CobroId" class="form-label text-primary">Descripc&iacute;on del trabajo</label>
                    <InputText class="form-control" @bind-Value="Trabajos.Descripcion"></InputText>
                    <ValidationMessage For="(()=> Trabajos.Descripcion)"></ValidationMessage>
                </div>

                @*Monto*@
                <div class="mb-3">
                    <label for="CobroId" class="form-label text-primary">Monto del trabajo</label>
                    <InputNumber class="form-control" @bind-Value="Trabajos.Monto"></InputNumber>
                    <ValidationMessage For="(()=> Trabajos.Monto)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(SueldoMensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @SueldoMensaje
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <a href="/Trabajos/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3"> Volver</a>
            <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3"> Guardar</button>
            <button type="button" class="btn btn-outline-primary bi bi-whatsapp mt-3" @onclick="EnviarWhatsApp">Enviar por WhatsApp</button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public List<Tecnicos> Tecnicos { get; set; } = new List<Tecnicos>();
    public List<Clientes> Clientes { get; set; } = new List<Clientes>();
    public List<Prioridades> Prioridades { get; set; } = new List<Prioridades>();
    public Trabajos Trabajos { get; set; } = new Trabajos();
    public string Mensaje { get; set; } = string.Empty;
    public string SueldoMensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Tecnicos = await tecnicosService.Listar(j => j.Id > 0);
        Clientes = await clientesService.Listar(j => j.ClienteId > 0);
        Prioridades = await prioridadesService.Listar(j => j.PrioridadId > 0);

        if (TrabajoId > 0)
        {
            Trabajos = await trabajosService.Buscar(TrabajoId);

            if (Trabajos == null)
            {
                Mensaje = "No se encontró el trabajo.";
            }
        }
    }

    public async Task Guardar()
    {
        if (Trabajos.Monto <= 0)
        {
            SueldoMensaje = "El monto debe ser mayor a 0.";
            return;
        }

        await trabajosService.Guardar(Trabajos);

        navigation.NavigateTo("/Trabajos/Index");
    }

    public void EnviarWhatsApp()
    {
        var cliente = Clientes.FirstOrDefault(c => c.ClienteId == Trabajos.ClienteId);

        if (cliente != null && !string.IsNullOrEmpty(cliente.WhatsApp))
        {
            
            string numeroWhatsApp = cliente.WhatsApp.Replace(" ", "").Replace("-", "");

            
            if (numeroWhatsApp.StartsWith("809"))
            {
                numeroWhatsApp = "1" + numeroWhatsApp;
            }

            
            string mensaje = $"Hola {cliente.Nombres}, su trabajo ha sido aceptado. Descripción del trabajo: {Trabajos.Descripcion}. Monto: {Trabajos.Monto}";
            
            string mensajeEscapado = Uri.EscapeDataString(mensaje);

           
            string urlWhatsApp = $"https://wa.me/{numeroWhatsApp}?text={mensajeEscapado}";
            Task.Delay(100).ContinueWith(t => navigation.NavigateTo(urlWhatsApp, true));
        }
        else
        {
            Mensaje = "No se encontró el número de teléfono del cliente.";
        }
    }



}
